package listeners;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.bukkit.Bukkit;
import org.bukkit.GameMode;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.block.ShulkerBox;
import org.bukkit.block.data.type.Dispenser;
import org.bukkit.entity.Creeper;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Fireball;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.block.BlockFormEvent;
import org.bukkit.event.block.BlockFromToEvent;
import org.bukkit.event.block.BlockPhysicsEvent;
import org.bukkit.event.block.BlockPistonExtendEvent;
import org.bukkit.event.block.BlockPistonRetractEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.block.BlockRedstoneEvent;
import org.bukkit.event.entity.CreatureSpawnEvent;
import org.bukkit.event.entity.EntityExplodeEvent;
import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
import org.bukkit.event.entity.EntityPortalEvent;
import org.bukkit.event.entity.EntitySpawnEvent;
import org.bukkit.event.entity.ExplosionPrimeEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerEditBookEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.vehicle.VehicleMoveEvent;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.BookMeta;

import com.BrainSpigot;
import com.Utils;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.wrappers.nbt.NbtBase;

import modules.Cooldown;

@SuppressWarnings("unused")
public class ExploitsFixes implements Listener {

	private BrainSpigot plugin;
	  
	  public ExploitsFixes(BrainSpigot plugin) {
		  this.plugin = plugin;
	  }
	
	public void register() {
		Bukkit.getPluginManager().registerEvents(this, plugin);
	}
	  
	@EventHandler(priority = EventPriority.HIGHEST)
	  public void on(PlayerInteractEvent event) {
	    Player player = event.getPlayer();
	    
	    if (!player.isOp() && event.getAction() == Action.RIGHT_CLICK_BLOCK && event.hasItem()) {
	      ItemStack item = event.getItem();
	      
	      if (item.getType() != Material.ARMOR_STAND) {
	        return;
	      }
	      
	      ItemStack comparison = new ItemStack(Material.ARMOR_STAND, item.getAmount());
	      
	      if (item.equals(comparison)) {
	        return;
	      }
	      
	      event.setCancelled(true);
	    } 
	}
	
	  @EventHandler
	  public void onEntitySpawn(EntitySpawnEvent event) {
	    Entity entity = event.getEntity();
	    if (entity.getType() == EntityType.ARMOR_STAND) {
	      entity.setGravity(false);
	    } 
	  }
	
	 @EventHandler
	  public void onPistonRetrackt(BlockPistonRetractEvent event) {
	      int found = 0;
	      ArrayList<Entity> remove = new ArrayList<Entity>();
	      if (event.getBlocks().size() > 0) {
	        for (Block blocks : event.getBlocks()) {
	          for (Entity entity : blocks.getWorld().getNearbyEntities(blocks.getLocation(), 0.5D, 0.5D, 0.5D)) {
	            if (entity instanceof org.bukkit.entity.ArmorStand) {
	              found++;
	              remove.add(entity);
	            } 
	          } 
	        } 
	      } else {
	        Block pistonhead = event.getBlock().getRelative(event.getDirection());
	        for (Entity entity : pistonhead.getWorld().getNearbyEntities(pistonhead.getLocation(), 0.5D, 0.5D, 0.5D)) {
	          if (entity instanceof org.bukkit.entity.ArmorStand) {
	            found++;
	            remove.add(entity);
	          } 
	        } 
	      } 
	      if (found > 1 && !remove.isEmpty())
	        for (Entity tokill : remove)
	          tokill.remove();  
	    
	 }
	
	 
	 
		private int droplimit = 0;
		// private int interact = 0;

		public String[] unallovedblocks = new String[] { "MINECART", "ACACIA_BOAT", "BIRCH_BOAT", "DARK_OAK_BOAT",
				"OAK_BOAT", "SPRUCE_BOAT", "ITEM_FRAME", "ARMOR_STAND", "CHEST_MINECART", "COMMAND_BLOCK_MINECART",
				"FURNACE_MINECART", "HOPPER_MINECART", "TNT_MINECART"};

		public String[] blockpiston = new String[] { "ANVIL", "CONCRETE_POWDER", "SAND",
				"DRAGON_EGG", "GRAVEL", "LAMP", "REDSTONE_BLOCK", "GLOWSTONE", "BEACON", "LANTERN"};
		
		@EventHandler
		public void onPistonExtend(BlockPistonExtendEvent event) {
			List<Block> Block = event.getBlocks();

			if (event.getBlock().getLocation().getBlockY() > 100) {
				event.setCancelled(true);
			}
			
			for (Block block : Block) {
				for (String check : blockpiston) {
					if (!block.getType().name().contains("SANDSTONE") && block.getType().name().contains(check)) {
						event.setCancelled(true);
					}
				}	
			}
			

		}
		
		private Location lastUpdatedBlock;
		  private Location updatedBlock;
		  private int blockUpdates = 0;

	

	@EventHandler
	public void onPacketSending(PacketEvent event) {
		if (event.isCancelled()) return;

		PacketContainer thisPacket = event.getPacket();
		List<NbtBase<?>> blockEntityData = thisPacket.getListNbtModifier().read(0);

		if (blockEntityData.size() > 8192) {
			List<NbtBase<?>> truncatedList = new ArrayList<NbtBase<?>>(blockEntityData.subList(0, 8192));
			thisPacket.getListNbtModifier().write(0, truncatedList);
		}
	}
	  
		  
		  
	  private Long update;
	  @SuppressWarnings("unused")
	private int count = 1;
		  
		  
		  
	  @EventHandler
	  public void onInteract(PlayerInteractEvent event)  {
	    Player player = event.getPlayer();
	    if (player.getInventory().getItemInMainHand() != null) {
	      for (Iterator<Integer> localIterator = player.getInventory().getItemInMainHand().getEnchantments().values().iterator(); localIterator.hasNext(); ) {
	    	  int level = ((Integer)localIterator.next()).intValue();
		        if (level > 5) {
		  	          if (update == null || System.currentTimeMillis() - update > 30000) { 
		  	        	  update = System.currentTimeMillis(); 
		  	  	  	      count = 1;
		  	          }
			          event.setCancelled(true);
			          player.getInventory().getItemInMainHand().setType(null);
		  	          count++;
			          break; 
		        }
	      }
	    }
	    
	    if (player.getInventory().getItemInOffHand() != null) {
	        for (Iterator<Integer> localIterator = player.getInventory().getItemInOffHand().getEnchantments().values().iterator(); localIterator.hasNext(); ) {
	      	  int level = ((Integer)localIterator.next()).intValue();
	  	        if (level > 5) {
	  	          if (update == null || System.currentTimeMillis() - update > 30000) { 
	  	        	  update = System.currentTimeMillis(); 
	  	  	  	      count = 1;
	  	          }
	  	          count++;
		  	      event.setCancelled(true);
		  	      player.getInventory().getItemInOffHand().setType(null);
		  	      break; 
	  	        }
	        }
	      }
	  }
	  
	  
/*
		@EventHandler(priority = EventPriority.MONITOR)
		public void onInventoryClick(InventoryClickEvent event){
			if (plugin.server.equalsIgnoreCase("creative")) {

				if (event.getInventory().getType().name().contains("CHEST") || event.getInventory().getType().name().contains("ER")) {
					
					if (event.getCurrentItem() != null && event.getCurrentItem().getType().name().contains("SHULK") && event.getClickedInventory().getTitle().contains("Gradient")) {	
						
						event.setCancelled(true);
		
						event.getCurrentItem().setType(Material.POPPY);
						event.getCurrentItem().setItemMeta(plugin.utils.createItem(Material.POPPY, "&eУлыбнись =)", plugin.utils.splitEqually(plugin.utils.colored(plugin.utils.getShutku()), 50)).getItemMeta());
										
					}
					
				}
			
				
				if (event.getInventory().getType().name().contains("SHULK")) {	
					
	                if (event.getCurrentItem().getType().name().contains("BOOK") || event.getCurrentItem().getType().name().contains("CHEST")) {
	                	
	                	event.setCancelled(true);	
	                	
	    				event.getCurrentItem().setType(Material.POPPY);
	    				event.getCurrentItem().setItemMeta(plugin.utils.createItem(Material.POPPY, "&eУлыбнись =)", plugin.utils.splitEqually(plugin.utils.colored(plugin.utils.getShutku()), 50)).getItemMeta());
	                    
	                }
			    }
			}
		}
	  
	  
		  @EventHandler
		  private void onMoveItem(BlockDispenseEvent event) {
			  if (plugin.server.equalsIgnoreCase("creative")) {

				  if (event.getItem().getType().name().contains("BOOK") || event.getItem().getType().name().contains("CHEST") || event.getItem().getType().name().contains("SHULK")) {
					  
					  event.setItem(plugin.utils.createItem(Material.POPPY, "&eУлыбнись =)", plugin.utils.splitEqually(plugin.utils.colored(plugin.utils.getShutku()), 50)));
					  
				  } 
				  
			  }
		  }
		
		
		
		  @EventHandler
		  private void onMoveItem(InventoryMoveItemEvent event) {
			  if (plugin.server.equalsIgnoreCase("creative")) {

				  if (event.getItem().getType().name().contains("BOOK") || event.getItem().getType().name().contains("CHEST") || event.getItem().getType().name().contains("SHULK")) {
					  
					  event.setItem(plugin.utils.createItem(Material.POPPY, "&eУлыбнись =)", plugin.utils.splitEqually(plugin.utils.colored(plugin.utils.getShutku()), 50)));
					  
				  } 
				  
			  }
		  }
		

		
		@EventHandler(priority = EventPriority.MONITOR)
		public void onInventoryPickup(InventoryPickupItemEvent event) {
			  if (plugin.server.equalsIgnoreCase("creative")) {
		
				  if (event.getItem().getType().name().contains("BOOK") || event.getItem().getType().name().contains("CHEST") || event.getItem().getType().name().contains("SHULK")) {
					  
					  event.getItem().setItemStack(plugin.utils.createItem(Material.POPPY, "&eУлыбнись =)", plugin.utils.splitEqually(plugin.utils.colored(plugin.utils.getShutku()), 50)));
					  
				  }
				  
			  }

		}


	   @EventHandler
	    public void onClick(InventoryCreativeEvent event) {
	        if (event.getCursor() != null) {
	            Map<Enchantment, Integer> enchants = event.getCursor().getEnchantments();
	            for (Enchantment enchant : enchants.keySet()) {
	                if (enchant.getMaxLevel() * 10 < enchants.get(enchant)) {
	        	          if (update == null || System.currentTimeMillis() - update > 30000) { 
	          	        	  update = System.currentTimeMillis(); 
	          	  	          plugin.sendAdminMessage(event.getWhoClicked().getName()+" занимается запрещенными вещами "+count+"x");
	          	  	  	      count = 1;
	          	          }
	          	          count++;
	        	        event.getCurrentItem().setType(Material.POPPY);
	                    event.getCurrentItem().setItemMeta(plugin.utils.createItem(Material.POPPY, "&eУлыбнись =)", plugin.utils.splitEqually(plugin.utils.colored(plugin.utils.getShutku()), 50)).getItemMeta());
	                }
	            }
	        }
	    }
	  
	   */
	   
	   
		@EventHandler
		public void onBook(PlayerEditBookEvent e) {
			if (e.getNewBookMeta().getPages().size() >= 5) {
				
				pages = null;
				for (int i =0; i<5; i++) {
					pages[i] = e.getNewBookMeta().getPages().get(i);
				}
				
				e.getNewBookMeta().setPages(pages);
				
				e.setNewBookMeta(e.getNewBookMeta());
			
			} 	  
		}
		  
		  
		
		
		  public BlockFace getBlockFace(Player player) {
			    List<Block> lastTwoTargetBlocks = player.getLastTwoTargetBlocks(null, 100);
			    if (lastTwoTargetBlocks.size() == 2 || ((Block)lastTwoTargetBlocks.get(1)).getType().isOccluding()) {
			      Block targetBlock = lastTwoTargetBlocks.get(1);
			      Block adjacentBlock = lastTwoTargetBlocks.get(0);
			      return targetBlock.getFace(adjacentBlock);
			    } 
			    return null;
			  }
			  
			  @EventHandler
			  public void OnitemPlace(BlockPlaceEvent event) {
			    if (event.getBlock().getType() == Material.DISPENSER)
			      if (event.getBlock().getLocation().getBlockY() >= event.getBlock().getWorld().getMaxHeight() - 1) {
			        Dispenser disp = (Dispenser)event.getBlock().getState().getData();
			        BlockFace face = disp.getFacing();
			        if (face == BlockFace.UP) {
			          event.setCancelled(true);
			        } 
			      }  
			  }
			  
			  @EventHandler
			  public void OnitemPlace2(BlockPlaceEvent event) {
			    if (event.getBlock().getType() == Material.DISPENSER)
			      if (event.getBlock().getLocation().getBlockY() == 0) {
			        Dispenser disp = (Dispenser)event.getBlock().getState().getData();
			        BlockFace face = disp.getFacing();
			        if (face == BlockFace.DOWN) {
			          event.setCancelled(true);
			        } 
			      }  
			  }
			  
			  @EventHandler
			  public void OnitemPlaces(PlayerInteractEvent event) {
			    if (event.getAction() == Action.RIGHT_CLICK_BLOCK)
			      if (event.getClickedBlock().getType() == Material.DISPENSER)
			        if (event.getClickedBlock().getLocation().getBlockY() >= event.getClickedBlock().getWorld().getMaxHeight() - 1) {
			          Dispenser disp = (Dispenser)event.getClickedBlock().getState().getData();
			          BlockFace face = disp.getFacing();
			          if (face == BlockFace.UP) {
			            event.setCancelled(true);
			          } 
			        }   
			  }
			  
			  @EventHandler
			  public void OnitemPlaceds(PlayerInteractEvent event) {
			    if (event.getAction() == Action.RIGHT_CLICK_BLOCK)
			      if (event.getClickedBlock().getType() == Material.DISPENSER)
			        if (event.getClickedBlock().getLocation().getBlockY() == 0) {
			          Dispenser disp = (Dispenser)event.getClickedBlock().getState().getData();
			          BlockFace face = disp.getFacing();
			          if (face == BlockFace.DOWN) {
			            event.setCancelled(true);
			          } 
			        }   
			  }
/*
			    @EventHandler
			    public void musor_proch(BlockDispenseEvent e) {
			    	ItemStack item = e.getItem();
			        if (item.getType().name().toLowerCase().contains("shulk") || item.getType().name().toLowerCase().contains("book")) {
			            e.setItem(new ItemStack(Material.POPPY));
			        }
			    }*
			  

			    @EventHandler
			    public void Interact(PlayerInteractEvent e) {
			        Player p = e.getPlayer();
			        ItemStack item = p.getInventory().getItemInMainHand();
			        if(item.getType().toString().toUpperCase().contains("SHULKER_BOX")) {
			            if(item.getItemMeta() instanceof BlockStateMeta){
			                BlockStateMeta im = (BlockStateMeta)item.getItemMeta();
			                if(im.getBlockState() instanceof ShulkerBox){
			                    ShulkerBox shulker = (ShulkerBox) im.getBlockState();
			                    if(shulker.getInventory().contains(Material.WRITTEN_BOOK)) {
			                    	p.getInventory().getItemInMainHand().setType(Material.POPPY);
			                        e.setCancelled(true);
			                    }
			                }
			            }
			        }
			    }
			   
			    @EventHandler
			    public void DropItemEvent(PlayerDropItemEvent e) {
			        ItemStack item = e.getItemDrop().getItemStack();
			        if(e.getPlayer().getGameMode() == GameMode.CREATIVE && item.getType().toString().toUpperCase().contains("SHULKER_BOX")) {
			            if(item.getItemMeta() instanceof BlockStateMeta){
			                BlockStateMeta im = (BlockStateMeta)item.getItemMeta();
			                if(im.getBlockState() instanceof ShulkerBox){
			                    ShulkerBox shulker = (ShulkerBox) im.getBlockState();
			                    if(shulker.getInventory().contains(Material.WRITTEN_BOOK)) {
			                        item.setType(Material.POPPY);
			                        e.setCancelled(true);
			                    }
			                }
			            }
			        }
			    }
			   */
		  @EventHandler
		  private void onChest(PlayerInteractEvent e) {
			  
			  if (e.getClickedBlock() != null) {
			  
				  Block block = e.getClickedBlock();
			  
				  if (block.getState() instanceof InventoryHolder) {
					  
					  Cooldown cooldown = new Cooldown(plugin, e.getPlayer().getName());
					  
					  if (cooldown.hasCooldown("chest")) {
						  e.setCancelled(true);
					  } else {
						  cooldown.setCooldown("chest", 1);
					  }  
					  
				  }
			  }
			  
		  }
		  

		  @EventHandler
		  private void onMove(VehicleMoveEvent e) {
			int i=0;
				for (Entity nearby : new Utils().getNearbyEntities(e.getVehicle().getLocation(), 5)) {
					if (!(nearby instanceof Player)) {
						i++;
					}
				}
				if (i >= 5) {
					if (e.getVehicle().getPassengers().size() == 0 || !(e.getVehicle().getPassengers().get(0) instanceof Player)) {
						e.getVehicle().remove();
					}
				}
		  }
		  
		  @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
		    public void onBlockFromTo(BlockFromToEvent event) {
		        Block block = event.getToBlock();
		            if (event.getBlock().getType() == Material.WATER) {
		            	Boolean setCanselled = true;
		            	for (double i=5;i>0;i--) {
		            		if (block.getLocation().subtract(0,i,0).getBlock().getType() != Material.AIR && block.getLocation().subtract(0,i,0).getBlock().getType() != Material.WATER) {
		            			setCanselled = false;
		            			break;
		            		}
		            	}
		            	if (setCanselled == true) {
			                event.setCancelled(true);
		            	}
		            }
		            
		  }
		  
		 

		  int obsRepeats = 0;
		  
		  public Location lastRepeater;
		  public int repeatersInRow = 0;
		  

	  
	  
		    Map<String, Long> playerFWList = new HashMap<String, Long>();
		    Map<String, Long> blockFWList = new HashMap<String, Long>();
		    
		    @EventHandler
		    public void fireworkCooldownP(PlayerInteractEvent e) {
		        if(e.getPlayer().getInventory().getItemInMainHand().getType().name().toLowerCase().contains("rocket")
		        		|| e.getPlayer().getInventory().getItemInOffHand().getType().name().toLowerCase().contains("rocket")) {
		            if(playerFWList.containsKey(e.getPlayer().getName())) {
		                if(System.currentTimeMillis() - playerFWList.get(e.getPlayer().getName())>3000){
		                    playerFWList.put(e.getPlayer().getName(), System.currentTimeMillis());
		                }else { e.setCancelled(true);
		            }
		            }else {
		            playerFWList.put(e.getPlayer().getName(), System.currentTimeMillis());
		            }
		            
		        }
		    }
		    @EventHandler
		    public void fireworkCooldownB(BlockDispenseEvent e) {
		        if(e.getItem().getType()==Material.FIREWORK_ROCKET) {
		            if(blockFWList.containsKey(e.getBlock().getLocation().getX()+";"+e.getBlock().getLocation().getY()+";"+e.getBlock().getLocation().getZ())) {
		                if(System.currentTimeMillis() - blockFWList.get(e.getBlock().getLocation().getX()+";"+e.getBlock().getLocation().getY()+";"+e.getBlock().getLocation().getZ())>3000){
		                    blockFWList.put(e.getBlock().getLocation().getX()+";"+e.getBlock().getLocation().getY()+";"+e.getBlock().getLocation().getZ(), System.currentTimeMillis());
		                }else { e.setCancelled(true);
		                }
		            }else {
		            blockFWList.put(e.getBlock().getLocation().getX()+";"+e.getBlock().getLocation().getY()+";"+e.getBlock().getLocation().getZ(), System.currentTimeMillis());
		            }
		            
		        }
		    }
		  
		    
		    
		@EventHandler(priority = EventPriority.LOWEST)
		public void dadarksoset(BlockFormEvent e) {
			if (plugin.getServer().getPluginManager().isPluginEnabled("PlotSquared")) {
				e.setCancelled(true);
			}
		}

		@EventHandler(priority = EventPriority.LOWEST)
		public void bookFix(PlayerEditBookEvent e) {
			BookMeta newBookMeta = e.getNewBookMeta(); // BookMeta received from player
			BookMeta fixedNewBookMeta = e.getPreviousBookMeta().clone(); // Server BookMeta
			fixedNewBookMeta.setPages(newBookMeta.getPages());
			if (e.isSigning()) {
				fixedNewBookMeta.setTitle(newBookMeta.getTitle());
				fixedNewBookMeta.setAuthor(e.getPlayer().getName());
			}
			e.setNewBookMeta(fixedNewBookMeta);
		}

		
	    @EventHandler
	    public void onPlayerTeleport(EntityPortalEvent event) {
	        if (!(event.getEntity() instanceof Player)) {
	            event.setCancelled(true);
	        }
	    }
	    
	    
	    public void velosipedistmedlenoproezhaetidinahuygandon(EntitySpawnEvent e) {
	    	int i = 0;
			for (Entity nearby : new Utils().getNearbyEntities(e.getEntity().getLocation(), 50)) {
				if (!(nearby instanceof Player) && Arrays.asList(unallovedblocks).contains(nearby.getType().name())) {
					if (i++ > 10) {
						e.setCancelled(true);
					}
				}
			}
	    }

		@EventHandler
		public void interact(PlayerInteractEvent e) {
			Action a = e.getAction();
			if (a == Action.RIGHT_CLICK_AIR || a == Action.LEFT_CLICK_AIR || a == Action.RIGHT_CLICK_BLOCK || a == Action.LEFT_CLICK_BLOCK) {
				if (e.getPlayer().getGameMode() == GameMode.CREATIVE) {
					if ((a == Action.RIGHT_CLICK_BLOCK || a == Action.LEFT_CLICK_BLOCK) && e.getClickedBlock().getType().name().toLowerCase().contains("portal")) {
						PlayerInventory in = e.getPlayer().getInventory();
						if (in.getItemInMainHand() != null && in.getItemInMainHand().getType().name().toLowerCase().contains("eye")) {
							e.setCancelled(true);
							in.setItemInMainHand(new ItemStack(Material.POPPY));
						}
						if (in.getItemInOffHand() != null && in.getItemInOffHand().getType().name().toLowerCase().contains("eye")) {
							e.setCancelled(true);
							in.setItemInOffHand(new ItemStack(Material.POPPY));
						}
					}
				}
			}
			
			if (a == Action.RIGHT_CLICK_AIR || a == Action.RIGHT_CLICK_BLOCK) {
				
				if (!e.getPlayer().hasPermission("archiquest.entityspawn.bypass")) {
					
					List<String> entities = Arrays.asList(unallovedblocks);
					
					if (entities.contains(e.getPlayer().getInventory().getItemInMainHand().getType().name()) || entities.contains(e.getPlayer().getInventory().getItemInOffHand().getType().name())) {
						long count = Arrays.asList(new Utils().getNearbyEntities(e.getPlayer().getLocation(), 50)).stream().filter(entity -> entity.getType() != EntityType.PLAYER && entities.contains(entity.getType().name())).count();
						if (count > 100) {
							e.setCancelled(true);
						}
					}
					
				}
			}
		}

		String[] allowedMobs = {
			"COW",
			"PIG",
			"SHEEP",
			"PUFFERFISH",
			"SILVERFISH",
			"TROPICAL_FISH", 
			"HORSE",
			"ZOMBIE",
			"VILLAGER",
			"BAT",
			"CHICKEN",
			"COD",
			"MOOSHROOM",
			"OCELOT",
			"PARROT",
			"RABBIT",
			"SALMON",
			"SHEEP",
			"SNOW_GOLEM",
			"SQUID",
			"TROPICAL_FISH",
			"TURTLE",
			"DONKEY",
			"MULE",
			"SKELETON_HORSE",
			"ZOMBIE_HORSE"
		};
		private String[] pages; 
		
		public int snowball = 0;
		
		@EventHandler(priority = EventPriority.MONITOR)
		public void onPlayerInteract(final PlayerInteractEvent event) {
			if (event.getPlayer().getInventory().getItemInMainHand().getType().name().toLowerCase().contains("ball") ||
					event.getPlayer().getInventory().getItemInOffHand().getType().name().toLowerCase().contains("ball")) {
				if (snowball++ == 10) {
					plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, new Runnable() { public void run() {
						
						snowball = 0;
						
					} }, 20*10);
				}
				
				if (snowball > 10) {
					event.setCancelled(true);
				}
			}
		    if (Action.RIGHT_CLICK_BLOCK == event.getAction()) {
		        if (Material.OBSIDIAN == event.getClickedBlock().getType()) {
		            if (Material.END_CRYSTAL == event.getMaterial()) {
	                    Entity[] entities = new Utils().getNearbyEntities(event.getClickedBlock().getLocation(), 50);
	                    int i = 0;
	                    for (Entity entity : entities) {
	                        if (EntityType.ENDER_CRYSTAL == entity.getType()) {
	                           i++;
	                        }
	                    }
	                    if (i>10) {
	                    	event.setCancelled(true);
	                    }
		            }
		        }
		    }
		}
		
		
		@EventHandler
		public void onMobSpawn(CreatureSpawnEvent e) {

			if (e.getSpawnReason() == SpawnReason.SPAWNER_EGG && !Arrays.asList(allowedMobs).contains(e.getEntityType().name())) {
				e.setCancelled(true);
			}
			
			if (!e.getSpawnReason().name().equalsIgnoreCase("CUSTOM") && e.getSpawnReason() != SpawnReason.NATURAL) {
				int i = 0;
				boolean isBypass = false;
				for (Entity nearby : new Utils().getNearbyEntities(e.getLocation(), 50)) {
					if (!(nearby instanceof Player)) {
						i++;
					} else {
						if (nearby.hasPermission("archiquest.entityspawn.bypass")) {
							isBypass = true;
						}
					}
				}
				if (i > 100) {
					if (!isBypass) {
						e.setCancelled(true);
					}
				}
			}
		}

		  @EventHandler(priority = EventPriority.MONITOR)
		  public void onEntityExplode(EntityExplodeEvent event) {
				Entity ent = event.getEntity();
				
				if (ent instanceof Creeper || ent instanceof Fireball) {
					event.setCancelled(true); //Removes block damage
				}
			}
		  @EventHandler(priority = EventPriority.MONITOR)
			public void onExplosionPrime(ExplosionPrimeEvent event) {
				event.setFire(false); //Only really needed for fireballs
				
				Entity ent = event.getEntity();
				if (ent instanceof Fireball)
					event.setRadius(2); //Increased from default(1), since the fireball now don't cause fire
			}
		
		  @EventHandler(priority = EventPriority.MONITOR)
		  public void redstoneExploit(BlockPhysicsEvent event) {
	  
			  Block broken = event.getBlock();
			  Block under = broken.getLocation().add(0, -1, 0).getBlock();
			  Block above = broken.getLocation().add(0, +1, 0).getBlock();

			  for (String s : blocks) {
				  if (broken.getType().name().contains(s) || above.getType().name().contains(s) || under.getType().name().contains(s)) {		
					  if (broken.getType() == under.getType() || broken.getType() == above.getType() || under.getType() == Material.AIR && !broken.getType().name().contains("LAMP") && !broken.getType().name().contains("TORCH")) {
						  event.setCancelled(true);
					  }
				  }
			  }
		  

			  try {
				  if (lastUpdatedBlock == null) {
					  lastUpdatedBlock = event.getBlock().getLocation();
				  }
  
				  updatedBlock = event.getBlock().getLocation();
				  
				  if (!Arrays.asList("REDSTONE_WIRE", "REDSTONE_TORCH", "COMPARATOR", "REPEATER").contains(event.getBlock().getType().name())) {
					  if (lastUpdatedBlock.getWorld() == updatedBlock.getWorld() && lastUpdatedBlock.distance(updatedBlock) == 1) { 
						  blockUpdates++;
						  if (blockUpdates > 25) {    
							  event.setCancelled(true);  
						  } 
						  if (blockUpdates == 25) {
								this.plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, new Runnable() { public void run() {	
								
									blockUpdates = 0;
								} }, 20);
						  }
					  }  
				  	lastUpdatedBlock = event.getBlock().getLocation();
				  }
			  } catch (Exception c) {}
			  
		  }
		  
		  @EventHandler(priority = EventPriority.LOWEST)
		  public void onRedstoneFast(BlockRedstoneEvent event) {
			Material block = event.getBlock().getType();  Location loc = event.getBlock().getLocation();
			if (event.getBlock().getType().name().toLowerCase().contains("observer")) {
				if (obsRepeats == 0) {
					plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, new Runnable() { public void run() {	
						obsRepeats = 0;
					} }, 60);
				}
				if (obsRepeats++ > 10) {
					event.setNewCurrent(0);
				} 
			}
			if (Arrays.asList("COMPARATOR", "REPEATER").contains(block.name())) {
				if (lastRepeater != null && lastRepeater.distance(loc) < 15) {
					repeatersInRow++;
					if (repeatersInRow == 5) {
						plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, new Runnable() { public void run() {	
							repeatersInRow = 0;
							lastRepeater = null;
						} }, 20*30);
					}
					if (lastRepeater != null && repeatersInRow == 25) {
						plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, new Runnable() { public void run() {	
							repeatersInRow = 0;
							lastRepeater = null;
						} }, 20);
					}
				}
				lastRepeater = loc;
				if (repeatersInRow >= 25) {
					event.setNewCurrent(0);
				}
			}
		 }
		  

		  
		  
	  private List<String> blocks = Arrays.asList( "REDSTONE", "REPEATER", "COMPARATOR", "WIRE", "TRIPWIRE", "DIODE", "LEVER", "BUTTON", "RAIL", "DAYLIGHT", "TORCH", "LADDER", "LAMP");

	  @EventHandler(priority = EventPriority.LOW)
	  public void blockExploit(BlockBreakEvent event) {

		  Block broken = event.getBlock();
		  Block under = broken.getLocation().add(0, -1, 0).getBlock();
		  Block above = broken.getLocation().add(0, +1, 0).getBlock();
		  
		  for (String s : blocks) {
			  
			  if (broken.getType().name().contains(s) && (above.getType().name().contains(s) || under.getType().name().contains(s))) {		
				  if (broken.getType() == under.getType() || broken.getType() == above.getType() || under.getType() == Material.AIR) {
					  if (!event.isCancelled()) {
						  event.getBlock().setType(Material.AIR, false);
						  return;
					  }
				  }
			  }
		  }
			  

		if (event.getBlock().getState() instanceof InventoryHolder) {
			InventoryHolder ih = (InventoryHolder) event.getBlock().getState();
			ih.getInventory().clear();
		} else {
			event.getBlock().getDrops().clear();
		}
			
	  }
		
		
		@EventHandler
		public void onDrop(PlayerDropItemEvent e) {
			droplimit++;
			if (droplimit >= 1000) {
				e.setCancelled(true);
				e.getPlayer().sendMessage("archiquest.droplimit");
				if (droplimit == 1000) {
					this.plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, new Runnable() {
						public void run() {
							droplimit = 0;
						}
					}, 200);
				}
			}

		}
	 
	 
	
	
}
