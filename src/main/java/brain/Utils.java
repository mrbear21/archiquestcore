package brain;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.entity.Entity;

public class Utils {

	public String locToString(Location loc) {
		return loc.getWorld().getName() +","+ loc.getX()+","+ loc.getY()+","+ loc.getZ()+","+ loc.getYaw()+","+ loc.getPitch();
		
	}
	public Location stringToLoc(String loc) {
		return stringToLoc(loc.split(","));
	}
	
	public Location stringToLoc(String[] loc) {
		double X = Double.valueOf(loc[1]);
		double Y = Double.valueOf(loc[2]);
		double Z = Double.valueOf(loc[3]);
		float Yaw = Float.valueOf(loc[4]);
		float Pitch = Float.valueOf(loc[5]);
		return new Location(Bukkit.getServer().getWorld(loc[0]), X, Y, Z, Yaw, Pitch);
	}
	
	
	public String longToTime(Long time) {
		Long seconds = time / 1000;
		int day = (int) TimeUnit.SECONDS.toDays(seconds);
		long hours = TimeUnit.SECONDS.toHours(seconds) - (day * 24);
		long minute = TimeUnit.SECONDS.toMinutes(seconds) - (TimeUnit.SECONDS.toHours(seconds) * 60);
		return day + " d " + hours + " h " + minute + " m " + new SimpleDateFormat("ss").format(new Date(time)) + " s";
	}
	public String translateSmiles(String string) {
		
		string = string.replace("<3", "â?¤");
		string = string.replace(":flip:", "(â•¯Â°ç›ŠÂ°ï¼‰â•¯ï¸µ â”»â”?â”»");
		string = string.replace(":v:", "âœ”");
		string = string.replace(":x:", "âœ˜");
		string = string.replace("(c)", "Â©");
		string = string.replace(":hi:", "(Â´â€¢ Ï‰ â€¢`)ï¾‰");
		string = string.replace(":love:", "â•°(â?¤Ï‰â?¤)â•¯");
		string = string.replace(":cry:", "o(â•¥ï¹?â•¥)o");
		string = string.replace("(r)", "Â®");
		string = string.replace(":hugs:", "âŠ‚(ï¿£â–½ï¿£)âŠƒ");
		string = string.replace(":hid:", "â”¬â”´â”¤ï½¥Ï‰ï½¥)ï¾‰");
		string = string.replace(":scry:", "ï¼¼(ã€‡_ï½?)ï¼?");
		string = string.replace(":star:", "âœ®");
		string = string.replace(":spider:", "/\\â•­(à° à° ç›Šà° à° )â•®/\\");
		string = string.replace(":kstringx:", "(ãƒŽÂ°ç›ŠÂ°)ãƒŽ");
		string = string.replace(":friend:", "ãƒ½(â‰§â—¡â‰¦)å…«(o^â—¡^o)ãƒŽ");
		string = string.replace(":sold:", "(ï¾’` ï¾› Â´)ï¸»ãƒ‡â•?ä¸€");
		string = string.replace(":toxic:", "â˜¢");
		string = string.replace(":magic:", "â•°(` ï¾› Â´)ã?¤â”€â”€â˜†*:ãƒ»ï¾Ÿ");
		string = string.replace(":)", "â˜º");
		string = string.replace(":bear:", "Ê•áµ”á´¥áµ”Ê”");
		string = string.replace(":fku:", "(à² ç›Šà² )å‡¸");
		string = string.replace(":music:", "â™¬â™ªâ™«");
		string = string.replace(":meh:", "Â¯\\_(ãƒ„)_/Â¯");
		string = string.replace(":cat:", "(^â†€á´¥â†€^)");
		string = string.replace(":che:", "âŠ™ï¹?âŠ™");
		string = string.replace(":hah:", "â—‰â—¡â—‰");
		string = string.replace(":hey:", "à² â–ƒà² ");
		string = string.replace(":nah:", "(ã?¥â—¡ï¹?â—¡)ã?¥");
		string = string.replace(":hmm:", "(Â¬â€¿Â¬)");
		string = string.replace(":heh:", "(â—•â€¿â—•)");
		string = string.replace(":kiya:", "â”Œ( à² â€¿à² )â”˜");
		string = string.replace(":fart:", "Îµ=Îµ=â”Œ( >_<)â”˜");
		string = string.replace(":nuu:", "(à² â•­â•®à² )");
		string = string.replace(":magic2:", "(ï¾‰â—•ãƒ®â—•)ï¾‰*:ï½¥ï¾Ÿâœ§");
		string = string.replace(":yay:", "(ã?¥ï½¡â—•â€¿â€¿â—•ï½¡)ã?¥");
		string = string.replace(":4pok:", "(ã?¥ï¿£ Â³ï¿£)ã?¥");
		string = string.replace(":takblet:", "à»’( à²  ãƒ® à²  )à¥­");
		string = string.replace(":sword:", "(à²  o à² )Â¤=}=====>");
		string = string.replace(":fcplm:", "(/_-)z");

		return string;
	}
	
	public String getLangWritingSystem(String lang) {
		switch (lang) {
			case "ua": return "cyrillic";
			case "by": return "cyrillic";
			case "ru": return "cyrillic";
			case "lv": return "latin";
			case "en": return "latin";
		}
		return "latin";
	}
	
	private String latin = "qwertyuiopasdfghjklzxcvbnm", cyrillic = "Ð¹Ñ†ÑƒÐºÐµÐ½Ð³ÑˆÑ‰Ð·Ñ…Ñ—Ñ„Ñ–Ð²Ð°Ð¿Ñ€Ð¾Ð»Ð´Ð¶Ñ”Ñ?Ñ‡Ñ?Ð¼Ð¸Ñ‚ÑŒÐ±ÑŽ";
	
	public String checkAlphabet(String message) {
		int l = 0, c = 0;
		for (String s : message.split("")) {
			if (latin.contains(s)) { l++; }
			if (cyrillic.contains(s)) { c++; }
		}
		return l > c ? "latin" : "cyrillic";
	}
	
	public Entity[] getNearbyEntities(Location l, int radius) {
		int chunkRadius = radius < 16 ? 1 : (radius - (radius % 16)) / 16;
		HashSet<Entity> radiusEntities = new HashSet<Entity>();
		for (int chX = 0 - chunkRadius; chX <= chunkRadius; chX++) {
			for (int chZ = 0 - chunkRadius; chZ <= chunkRadius; chZ++) {
				int x = (int) l.getX(), y = (int) l.getY(), z = (int) l.getZ();
				for (Entity e : new Location(l.getWorld(), x + (chX * 16), y, z + (chZ * 16)).getChunk()
						.getEntities()) {
					if (e.getLocation().distance(l) <= radius && e.getLocation().getBlock() != l.getBlock())
						radiusEntities.add(e);
				}
			}
		}
		return radiusEntities.toArray(new Entity[radiusEntities.size()]);
	}


}
